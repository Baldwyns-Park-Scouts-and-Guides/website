#!/bin/bash

# Git commit-msg hook for conventional commit format validation

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

commit_msg_file="$1"
commit_msg=$(cat "$commit_msg_file")

# Skip if this is a merge commit
if grep -q "^Merge " "$commit_msg_file"; then
    exit 0
fi

# Skip if this is a revert commit
if grep -q "^Revert " "$commit_msg_file"; then
    exit 0
fi

# Check if pre-commit is available and has conventional-pre-commit
if command -v pre-commit >/dev/null 2>&1; then
    if pre-commit run --hook-stage commit-msg conventional-pre-commit --commit-msg-filename="$commit_msg_file" >/dev/null 2>&1; then
        exit 0
    fi
fi

# Basic conventional commit validation
echo -e "${YELLOW}Validating commit message format...${NC}"

# Conventional commit pattern: type(scope): description
pattern="^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert)(\(.+\))?: .{1,50}"

if echo "$commit_msg" | grep -qE "$pattern"; then
    echo -e "${GREEN}✓ Commit message format is valid${NC}"
    exit 0
else
    echo -e "${RED}✗ Invalid commit message format${NC}"
    echo ""
    echo "Commit message should follow conventional commit format:"
    echo "  type(scope): description"
    echo ""
    echo "Types: feat, fix, docs, style, refactor, test, chore, perf, ci, build, revert"
    echo "Example: feat(auth): add user login functionality"
    echo "Example: fix: resolve navigation bug"
    echo ""
    echo "Your message: $commit_msg"
    exit 1
fi
